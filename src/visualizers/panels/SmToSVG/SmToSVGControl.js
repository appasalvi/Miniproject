/*globals define, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Wed Nov 20 2024 22:43:40 GMT-0600 (Central Standard Time).
 */

define([
    'js/Constants',
    'js/Utils/GMEConcepts',
    'js/NodePropertyNames'
], function (
    CONSTANTS,
    GMEConcepts,
    nodePropertyNames
) {

    'use strict';

    function SmToSVGControl(options) {

        this._logger = options.logger.fork('Control');

        this._client = options.client;

        // Initialize core collections and variables
        this._widget = options.widget;

        this._currentNodeId = null;
        this._currentNodeParentId = undefined;

        this._logger.debug('ctor finished');

        this._territoryId = this._client.addUI(this, events => {
            this._eventCallback(events);
        });
    }

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    SmToSVGControl.prototype.selectedObjectChanged = function (nodeId) {
        if(nodeId !== null && nodeId !== this._currentNodeId){
            this._currentNodeId = nodeId;
            this._selfPatterns = {};
            this._selfPatterns[nodeId] = {children: 0};
            this._client.updateTerritory(this._territoryId, this._selfPatterns);
        }
    };

    /* * * * * * * * Node Event Handling * * * * * * * */
    SmToSVGControl.prototype._eventCallback = function (events) {
        var i = events ? events.length : 0,
            event;

        this._logger.debug('_eventCallback \'' + i + '\' items');

        while (i--) {
            event = events[i];
            switch (event.etype) {

            case CONSTANTS.TERRITORY_EVENT_LOAD:
            case CONSTANTS.TERRITORY_EVENT_UPDATE:
                if(event.eid === this._currentNodeId){
                    let node = this._client.getNode(this._currentNodeId);
                    if(node){
                        this._widget.initNode(this._client.getActiveCommitHash(),node.getId());
                    }
                }
                break;
            default:
                break;
            }
        }

        this._logger.debug('_eventCallback \'' + events.length + '\' items - DONE');
    };

    SmToSVGControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
        if (this._currentNodeId === activeObjectId) {
            // The same node selected as before - do not trigger
        } else {
            this.selectedObjectChanged(activeObjectId);
        }
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    SmToSVGControl.prototype.destroy = function () {
        this._detachClientEventListeners();
        this._removeToolbarItems();
    };

    SmToSVGControl.prototype._attachClientEventListeners = function () {
        this._detachClientEventListeners();
        WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    SmToSVGControl.prototype._detachClientEventListeners = function () {
        WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    SmToSVGControl.prototype.onActivate = function () {
        this._attachClientEventListeners();
        this._displayToolbarItems();

        if (typeof this._currentNodeId === 'string') {
            WebGMEGlobal.State.registerActiveObject(this._currentNodeId, {suppressVisualizerFromNode: true});
        }
    };

    SmToSVGControl.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
        this._hideToolbarItems();
    };

    /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
    SmToSVGControl.prototype._displayToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].show();
            }
        } else {
            this._initializeToolbar();
        }
    };

    SmToSVGControl.prototype._hideToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].hide();
            }
        }
    };

    SmToSVGControl.prototype._removeToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].destroy();
            }
        }
    };

    SmToSVGControl.prototype._initializeToolbar = function () {
        const {_client, _logger, _widget} = this;
        const self = this;
        const toolBar = WebGMEGlobal.Toolbar;

        this._toolbarItems = [];

        this._toolbarItems.push(toolBar.addSeparator());

        /************** Go to hierarchical parent button ****************/
        this.$btnGenSVG = toolBar.addButton({
            title: 'Generate SVG',
            icon: 'glyphicon glyphicon-camera',
            clickFn: function (/*data*/) {
                const context = _client.getCurrentPluginContext('ExportToSVG');
                context.managerConfig.activeNode = self._currentNodeId;
                context.managerConfig.namespace = null;
                context.pluginConfig = {};

                _client.runServerPlugin('ExportToSVG', context, (err, result)=>{
                    _widget.refresh()
                });
            }
        });
        this._toolbarItems.push(this.$btnGenSVG);

        this._toolbarInitialized = true;
    };

    return SmToSVGControl;
});
